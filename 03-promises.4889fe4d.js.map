{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SAiCA,SAASC,EAAcC,EAAUC,GAC/B,IAAMC,EAAgBC,KAAKC,SAAW,GACtC,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3BC,YAAW,WACLN,EACFI,EAAQ,CAAEN,WAAUC,UAEpBM,EAAO,CAAEP,WAAUC,S,GAEpBA,E,IAxCYQ,SAASC,cAAc,SAC/BC,iBAAiB,UAE5B,SAAkBC,GAChBA,EAAEC,iBACF,IAEmBC,EAAfF,EAAEG,cADJC,SAAYC,EAAKH,EAALb,MAAOiB,EAAIJ,EAAJI,KAAMC,EAAML,EAANK,OAG3B,GAAIF,EAAMG,MAAQ,GAAKF,EAAKE,MAAQ,GAAKD,EAAOC,MAAQ,EACtDC,EAAAxB,GAASyB,OAAOC,QAAS,yCAEvB,IAAG,IAAIC,EAAI,EAAGA,EAAIL,EAAOC,MAAOI,GAAK,EAAG,CACxC,IAAIC,EAAWD,EAAI,EACbE,EAAYC,OAAOV,EAAMG,OAASF,EAAKE,MAAQI,EAErDzB,EAAc0B,EAAUC,GACrBE,MAAK,SAAAC,G,IAAG7B,EAAQ6B,EAAR7B,SAAUC,EAAK4B,EAAL5B,MACjBoB,EAAAxB,GAASyB,OAAOQ,QACd,uBAAwCC,OAAf/B,EAAS,QAAY+B,OAAN9B,EAAM,M,IAGjD+B,OAAM,SAAAH,G,IAAG7B,EAAQ6B,EAAR7B,SAAUC,EAAK4B,EAAL5B,MAClBoB,EAAAxB,GAASyB,OAAOW,QACd,sBAAuCF,OAAf/B,EAAS,QAAY+B,OAAN9B,EAAM,M","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst submitForm = document.querySelector('.form');\nsubmitForm.addEventListener('submit', onSubmit);\n\nfunction onSubmit(e) {\n  e.preventDefault();\n  const {\n    elements: { delay, step, amount },\n  } = e.currentTarget;\n\n  if (delay.value < 0 || step.value < 0 || amount.value < 0) {\n    Notiflix.Notify.warning(`❗ Please enter a positive number`);\n  } else {\n    for (let i = 0; i < amount.value; i += 1) {\n      let position = i + 1;\n      const stepDelay = Number(delay.value) + step.value * i;\n\n      createPromise(position, stepDelay)\n        .then(({ position, delay }) => {\n          Notiflix.Notify.success(\n            `✅ Fulfilled promise ${position} in ${delay}ms`\n          );\n        })\n        .catch(({ position, delay }) => {\n          Notiflix.Notify.failure(\n            `❌ Rejected promise ${position} in ${delay}ms`\n          );\n        });\n    }\n  }\n}\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n\n// function onSubmit(e) {\n//   e.preventDefault();\n\n//   const form = e.target;\n//   const firstDelay = e.currentTarget.delay;\n//   const delay = e.currentTarget.step;\n//   const amount = e.currentTarget.amount;\n\n//   const promiseNumbers = [];\n//   let sum = 0;\n\n//   while (promiseNumbers.length < amount.value) {\n//     promises.push((sum += 1));\n//   }\n\n//   setTimeout(() => {\n//     promises.forEach((promise, index) => {\n//       setTimeout(() => {\n//         createPromise(promise, delay.value)\n//           .then(({ position, delay }) => {\n//             Notiflix.Notify.success(\n//               `✅ Fulfilled promise ${position} in ${delay}ms`\n//             );\n//           })\n//           .catch(({ position, delay }) => {\n//             Notiflix.Notify.failure(\n//               `❌ Rejected promise ${position} in ${delay}ms`\n//             );\n//           });\n//       }, delay.value * index);\n//     });\n//   }, firstDelay.value);\n// }\n\n// function createPromise(position, delay) {\n//   const shouldResolve = Math.random() > 0.3;\n//   return new Promise((resolve, reject) => {\n//     setTimeout(() => {\n//       if (shouldResolve) {\n//         resolve({ position, delay });\n//       } else {\n//         reject({ position, delay });\n//       }\n//     }, delay);\n//   });\n// }\n"],"names":["$6JpON","parcelRequire","$ce04d3a99e08e73b$var$createPromise","position","delay","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","document","querySelector","addEventListener","e","preventDefault","_elements","currentTarget","elements","delay1","step","amount","value","$parcel$interopDefault","Notify","warning","i","position1","stepDelay","Number","then","param","success","concat","catch","failure"],"version":3,"file":"03-promises.4889fe4d.js.map"}